{"creation_time": "2024-04-10T11:05:41+00:00", "days_back": 7, "models": {"model.jaffle_shop.orders": {"name": "orders", "unique_id": "model.jaffle_shop.orders", "owners": [], "tags": [], "package_name": "jaffle_shop", "description": "This table has basic information about orders, as well as some derived facts based on payments", "full_path": "models/orders.sql", "meta": {}, "materialization": "table", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "patch_path": "jaffle_shop://models/schema.yml", "model_name": "orders", "normalized_full_path": "jaffle_shop/models/orders.sql", "fqn": "postgres.js.orders", "artifact_type": "model"}, "model.jaffle_shop.customers": {"name": "customers", "unique_id": "model.jaffle_shop.customers", "owners": [], "tags": [], "package_name": "jaffle_shop", "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "full_path": "models/customers.sql", "meta": {}, "materialization": "table", "database_name": "postgres", "schema_name": "js", "table_name": "customers", "patch_path": "jaffle_shop://models/schema.yml", "model_name": "customers", "normalized_full_path": "jaffle_shop/models/customers.sql", "fqn": "postgres.js.customers", "artifact_type": "model"}, "model.jaffle_shop.stg_customers": {"name": "stg_customers", "unique_id": "model.jaffle_shop.stg_customers", "owners": [], "tags": [], "package_name": "jaffle_shop", "description": "", "full_path": "models/staging/stg_customers.sql", "meta": {}, "materialization": "view", "database_name": "postgres", "schema_name": "js", "table_name": "stg_customers", "patch_path": "jaffle_shop://models/staging/schema.yml", "model_name": "stg_customers", "normalized_full_path": "jaffle_shop/models/staging/stg_customers.sql", "fqn": "postgres.js.stg_customers", "artifact_type": "model"}, "model.jaffle_shop.stg_orders": {"name": "stg_orders", "unique_id": "model.jaffle_shop.stg_orders", "owners": [], "tags": [], "package_name": "jaffle_shop", "description": "", "full_path": "models/staging/stg_orders.sql", "meta": {}, "materialization": "view", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "patch_path": "jaffle_shop://models/staging/schema.yml", "model_name": "stg_orders", "normalized_full_path": "jaffle_shop/models/staging/stg_orders.sql", "fqn": "postgres.js.stg_orders", "artifact_type": "model"}, "model.jaffle_shop.stg_payments": {"name": "stg_payments", "unique_id": "model.jaffle_shop.stg_payments", "owners": [], "tags": [], "package_name": "jaffle_shop", "description": "", "full_path": "models/staging/stg_payments.sql", "meta": {}, "materialization": "view", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "patch_path": "jaffle_shop://models/staging/schema.yml", "model_name": "stg_payments", "normalized_full_path": "jaffle_shop/models/staging/stg_payments.sql", "fqn": "postgres.js.stg_payments", "artifact_type": "model"}}, "groups": {"dbt": {"jaffle_shop": {"models": {"__files__": [{"node_id": "model.jaffle_shop.orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.customers", "resource_type": "model"}], "staging": {"__files__": [{"node_id": "model.jaffle_shop.stg_customers", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_payments", "resource_type": "model"}]}}}}, "tags": {"No tags": [{"node_id": "model.jaffle_shop.orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.customers", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_customers", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_payments", "resource_type": "model"}]}, "owners": {"No owners": [{"node_id": "model.jaffle_shop.orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.customers", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_customers", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_orders", "resource_type": "model"}, {"node_id": "model.jaffle_shop.stg_payments", "resource_type": "model"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.jaffle_shop.orders": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "elementary_unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3.status.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "status", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd", "elementary_unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd.amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere amount is null", "test_params": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49", "elementary_unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49.bank_transfer_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "bank_transfer_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select bank_transfer_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere bank_transfer_amount is null", "test_params": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select bank_transfer_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere bank_transfer_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625", "elementary_unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625.coupon_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "coupon_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select coupon_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere coupon_amount is null", "test_params": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select coupon_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere coupon_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59", "elementary_unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59.credit_card_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "credit_card_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select credit_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere credit_card_amount is null", "test_params": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select credit_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere credit_card_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af", "elementary_unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a", "elementary_unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a.gift_card_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "gift_card_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select gift_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere gift_card_amount is null", "test_params": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select gift_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere gift_card_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed", "elementary_unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "order_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select order_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "elementary_unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "customer_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select customer_id as from_field\n    from \"postgres\".\"js\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"postgres\".\"js\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select customer_id as from_field\n    from \"postgres\".\"js\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"postgres\".\"js\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e", "elementary_unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "order_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.jaffle_shop.stg_customers": [{"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa", "elementary_unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_customers", "table_unique_id": "postgres.js.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada", "elementary_unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_customers", "table_unique_id": "postgres.js.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.jaffle_shop.stg_orders": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "elementary_unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad.status.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "status", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64", "elementary_unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "order_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_id\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select order_id\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a", "elementary_unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "order_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.jaffle_shop.customers": [{"metadata": {"test_unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d", "elementary_unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.customers", "table_unique_id": "postgres.js.customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1", "elementary_unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.customers", "table_unique_id": "postgres.js.customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.jaffle_shop.stg_payments": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "elementary_unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278.payment_method.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_method", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)", "test_params": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075", "elementary_unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075.payment_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select payment_id\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is null", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select payment_id\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712", "elementary_unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712.payment_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.jaffle_shop.orders": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "model.jaffle_shop.stg_customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.jaffle_shop.stg_orders": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "model.jaffle_shop.customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.jaffle_shop.stg_payments": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}}, "test_runs": {"model.jaffle_shop.orders": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "elementary_unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3.status.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "status", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd", "elementary_unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd.amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere amount is null", "test_params": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49", "elementary_unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49.bank_transfer_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "bank_transfer_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select bank_transfer_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere bank_transfer_amount is null", "test_params": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select bank_transfer_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere bank_transfer_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625", "elementary_unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625.coupon_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "coupon_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select coupon_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere coupon_amount is null", "test_params": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select coupon_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere coupon_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59", "elementary_unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59.credit_card_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "credit_card_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select credit_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere credit_card_amount is null", "test_params": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select credit_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere credit_card_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af", "elementary_unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a", "elementary_unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a.gift_card_amount.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "gift_card_amount", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select gift_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere gift_card_amount is null", "test_params": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select gift_card_amount\nfrom \"postgres\".\"js\".\"orders\"\nwhere gift_card_amount is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed", "elementary_unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "order_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select order_id\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "elementary_unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "customer_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select customer_id as from_field\n    from \"postgres\".\"js\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"postgres\".\"js\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select customer_id as from_field\n    from \"postgres\".\"js\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"postgres\".\"js\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e", "elementary_unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "orders", "column_name": "order_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.orders", "table_unique_id": "postgres.js.orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.jaffle_shop.stg_customers": [{"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa", "elementary_unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_customers", "table_unique_id": "postgres.js.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada", "elementary_unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_customers", "table_unique_id": "postgres.js.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.jaffle_shop.stg_orders": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "elementary_unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad.status.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "status", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64", "elementary_unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "order_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_id\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select order_id\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a", "elementary_unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a.order_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_orders", "column_name": "order_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_orders", "table_unique_id": "postgres.js.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.jaffle_shop.customers": [{"metadata": {"test_unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d", "elementary_unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.customers", "table_unique_id": "postgres.js.customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select customer_id\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1", "elementary_unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1.customer_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.customers", "table_unique_id": "postgres.js.customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.jaffle_shop.stg_payments": [{"metadata": {"test_unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "elementary_unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278.payment_method.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_method", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)", "test_params": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"js\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075", "elementary_unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075.payment_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select payment_id\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is null", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select payment_id\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712", "elementary_unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712.payment_id.generic", "database_name": "postgres", "schema_name": "js", "table_name": "stg_payments", "column_name": "payment_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-10T11:04:54+00:00", "latest_run_time_utc": "2024-04-10T11:04:54+00:00", "latest_run_status": "pass", "model_unique_id": "model.jaffle_shop.stg_payments", "table_unique_id": "postgres.js.stg_payments", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"js\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-10T11:04:54+00:00", "id": "79c575b8-1b36-4a74-bc79-172b08fab72b", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}]}, "test_runs_totals": {"model.jaffle_shop.orders": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "model.jaffle_shop.stg_customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.jaffle_shop.stg_orders": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "model.jaffle_shop.customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.jaffle_shop.stg_payments": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}}, "coverages": {"model.jaffle_shop.customers": {"table_tests": 0, "column_tests": 2}, "model.jaffle_shop.orders": {"table_tests": 0, "column_tests": 10}, "model.jaffle_shop.stg_customers": {"table_tests": 0, "column_tests": 2}, "model.jaffle_shop.stg_orders": {"table_tests": 0, "column_tests": 3}, "model.jaffle_shop.stg_payments": {"table_tests": 0, "column_tests": 3}}, "model_runs": [{"unique_id": "model.jaffle_shop.stg_payments", "schema": "js", "name": "stg_payments", "status": "success", "last_exec_time": 5.3, "median_exec_time": 5.3, "compiled_code": "with source as (\n    select * from \"postgres\".\"js\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-04-10T11:04:49+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "79e25e36-46f6-4d83-804a-661c62c9177e", "time_utc": "2024-04-10T11:04:49+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 5.3}]}, {"unique_id": "model.jaffle_shop.stg_orders", "schema": "js", "name": "stg_orders", "status": "success", "last_exec_time": 5.3, "median_exec_time": 5.3, "compiled_code": "with source as (\n    select * from \"postgres\".\"js\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-04-10T11:04:49+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "79e25e36-46f6-4d83-804a-661c62c9177e", "time_utc": "2024-04-10T11:04:49+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 5.3}]}, {"unique_id": "model.jaffle_shop.stg_customers", "schema": "js", "name": "stg_customers", "status": "success", "last_exec_time": 5.5, "median_exec_time": 5.5, "compiled_code": "with source as (\n    select * from \"postgres\".\"js\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-04-10T11:04:49+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "79e25e36-46f6-4d83-804a-661c62c9177e", "time_utc": "2024-04-10T11:04:49+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 5.5}]}, {"unique_id": "model.jaffle_shop.orders", "schema": "js", "name": "orders", "status": "success", "last_exec_time": 1.2, "median_exec_time": 1.2, "compiled_code": "\n\nwith orders as (\n\n    select * from \"postgres\".\"js\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"postgres\".\"js\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "last_generated_at": "2024-04-10T11:04:49+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "79e25e36-46f6-4d83-804a-661c62c9177e", "time_utc": "2024-04-10T11:04:49+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.2}]}, {"unique_id": "model.jaffle_shop.customers", "schema": "js", "name": "customers", "status": "success", "last_exec_time": 1.0, "median_exec_time": 1.0, "compiled_code": "with customers as (\n\n    select * from \"postgres\".\"js\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"postgres\".\"js\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"postgres\".\"js\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final", "last_generated_at": "2024-04-10T11:04:49+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "79e25e36-46f6-4d83-804a-661c62c9177e", "time_utc": "2024-04-10T11:04:49+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.0}]}], "model_runs_totals": {"model.jaffle_shop.stg_payments": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.jaffle_shop.stg_orders": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.jaffle_shop.stg_customers": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.jaffle_shop.orders": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.jaffle_shop.customers": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "filters": {"test_results": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.jaffle_shop.customers", "model.jaffle_shop.stg_payments", "model.jaffle_shop.orders", "model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders"]}], "test_runs": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.jaffle_shop.customers", "model.jaffle_shop.stg_payments", "model.jaffle_shop.orders", "model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.jaffle_shop.customers", "model.jaffle_shop.stg_payments", "model.jaffle_shop.orders", "model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders"]}]}, "lineage": {"nodes": [{"id": "model.jaffle_shop.orders", "type": "model", "sub_type": "table"}, {"id": "model.jaffle_shop.customers", "type": "model", "sub_type": "table"}, {"id": "model.jaffle_shop.stg_customers", "type": "model", "sub_type": "view"}, {"id": "model.jaffle_shop.stg_orders", "type": "model", "sub_type": "view"}, {"id": "model.jaffle_shop.stg_payments", "type": "model", "sub_type": "view"}], "edges": [["model.jaffle_shop.orders", "model.jaffle_shop.stg_orders"], ["model.jaffle_shop.orders", "model.jaffle_shop.stg_payments"], ["model.jaffle_shop.customers", "model.jaffle_shop.stg_customers"], ["model.jaffle_shop.customers", "model.jaffle_shop.stg_orders"], ["model.jaffle_shop.customers", "model.jaffle_shop.stg_payments"]]}, "invocations": [{"invocation_id": "79e25e36-46f6-4d83-804a-661c62c9177e", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": "https://github.com/johnlee96/jaffle_shop/actions/runs/8630167321", "job_name": null, "job_id": null, "orchestrator": "github_actions"}], "resources_latest_invocation": {"model.elementary.alerts_anomaly_detection": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.alerts_dbt_models": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.alerts_dbt_source_freshness": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.alerts_dbt_tests": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.alerts_schema_changes": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.anomaly_threshold_sensitivity": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.data_monitoring_metrics": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_artifacts_hashes": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_columns": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_exposures": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_invocations": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_metrics": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_models": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_run_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_seeds": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_snapshots": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_source_freshness_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_sources": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.dbt_tests": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.elementary_test_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.enriched_columns": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.information_schema_columns": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.job_run_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.metadata": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.metrics_anomaly_score": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.model_run_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.monitors_runs": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.schema_columns_snapshot": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.snapshot_run_results": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.elementary.test_result_rows": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.jaffle_shop.customers": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.jaffle_shop.orders": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.jaffle_shop.stg_customers": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.jaffle_shop.stg_orders": "79e25e36-46f6-4d83-804a-661c62c9177e", "model.jaffle_shop.stg_payments": "79e25e36-46f6-4d83-804a-661c62c9177e"}, "invocations_job_identification": {}, "env": {"project_name": "jaffle_shop", "env": "dev", "warehouse_type": "postgres"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "ede9e780-b96a-437a-9cf3-62abbf6a92db", "anonymous_warehouse_id": "49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763"}}